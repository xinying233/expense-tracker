package com.xinying.hu.expense_tracker;

import org.springframework.ui.Model;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private UserRelationRepository userRelationRepository;

    private final MainService mainService;

    @Autowired
    private ExpenseRepository expenseRepository;

    public MainController(MainService mainService) {
        this.mainService = mainService;
    }

    @GetMapping(path="/signup")
    public String signUp() {
        return "signup";
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public String addNewUser (@RequestParam String username, @RequestParam String email, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
//        model.addAttribute("username", username);
//        model.addAttribute("email", email);
        User n = new User();
        n.setName(username);
        n.setEmail(email);
        userRepository.save(n);
        return "redirect:/user/index";
    }

    @GetMapping(path="index")
    public String index(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "index";
    }

    @GetMapping(path="/{id}/expenses")
    public String showExpenses (@PathVariable Integer id, Model model) {
        User user = mainService.findUserById(id);
        List<Expense> expenses = expenseRepository.findAllByPayerId(id);
        expenses.addAll(expenseRepository.findAllByBorrowerId(id));
        List<UserRelation> relations = userRelationRepository.findAllByUserA(user);
        relations.addAll(userRelationRepository.findAllByUserB(user));

        model.addAttribute( "expenses", expenses);
        model.addAttribute("user", user);
        model.addAttribute("relations", relations);
        return "expenses";
    }

    @PostMapping(path="/{id}/expense/add")
    public String addExpense(@PathVariable Integer id, Integer borrowerId, LocalDate date, float amount, float splitPercent, String category) {
        User payer = mainService.findUserById(id);
        User borrower = mainService.findUserById(borrowerId);
        mainService.createExpense(payer, borrower, date, amount, splitPercent, category);
        return "redirect:/user/{id}/expenses";
    }

    @PostMapping(path="/{userId}/expense/{expenseId}/settle")
    public String settleExpense(@PathVariable Integer expenseId) {
        Optional<Expense> expense = expenseRepository.findById(expenseId);
        expense.ifPresent(theExpense -> {
            if (theExpense.isSettled() == false) {
                theExpense.settleExpense();
                expenseRepository.save(theExpense);

                Optional<UserRelation> relation = mainService.findUserRelationByUserIds(theExpense.getPayer(), theExpense.getBorrower());
                relation.ifPresent(theRelation -> {
                    theRelation.addToAmount(theExpense.getPayer(), (float)((-1) * 0.01 * theExpense.getAmount() * theExpense.getSplitPercent()));
                    userRelationRepository.save(theRelation);
                });
            }
        });

        return "redirect:/user/{userId}/expenses";
    }

    @PostMapping(path="/{userId}/expenses/{relatedUserId}/settle_all")
    public String settleAll(@PathVariable Integer userId, @PathVariable Integer relatedUserId) {
        Optional<User> user = userRepository.findById(userId);
        Optional<User> relatedUser = userRepository.findById(relatedUserId);
        if (user.isPresent() && relatedUser.isPresent()) {
            List<Expense> expenses = expenseRepository.findAllByPayerIdAndBorrowerId(userId, relatedUserId);
            expenses.addAll(expenseRepository.findAllByPayerIdAndBorrowerId(relatedUserId, userId));

            Iterator<Expense> iterator = expenses.listIterator();
            while (iterator.hasNext()) { iterator.next().settleExpense(); }
            expenseRepository.saveAll(expenses);

            Optional<UserRelation> relation = mainService.findUserRelationByUserIds(user.get(), relatedUser.get());
            relation.ifPresent(theRelation -> {
                theRelation.setAmount(0);
                userRelationRepository.save(theRelation);
            });
        }
        return "redirect:/user/{userId}/expenses";
    }
}
